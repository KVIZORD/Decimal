#include "s21_decimal.h"
#include "common/common.h"

#include <check.h>

#suite comparison
    #tcase s21_is_less
        #test is_less_first_less
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_first_not_less
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_less_nums_zeroes
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_less_nums_max_decimal
        s21_decimal num_1 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        s21_decimal num_2 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_less_nums_with_exp
        s21_decimal num_1 = {{25, 0, 0, 0}};
        set_exp_decimal(&num_1, 1);
        s21_decimal num_2 = {{25, 0, 0, 0}};
        set_exp_decimal(&num_2, 0);
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_nums_max_decimal_with_exp
        s21_decimal num_1 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        set_exp_decimal(&num_1, 1);
        s21_decimal num_2 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        set_exp_decimal(&num_2, 0);
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_first_negative
        s21_decimal num_1 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_second_negative
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_2, 1);
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_less_both_negative
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        set_sign_decimal(&num_2, 1);
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 0);

    #tcase s21_is_less_or_equal
        #test is_less_or_equal_first_less
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_or_equal_first_not_less
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_less_or_equal_first_equal
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_or_equal_nums_max_decimal
        s21_decimal num_1 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        s21_decimal num_2 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_or_equal_first_equal_with_exp
        s21_decimal num_1 = {{__INT_MAX__, 0, 0, 0}};
        set_exp_decimal(&num_1, 5);
        s21_decimal num_2 = {{__INT_MAX__, 0, 0, 0}};
        set_exp_decimal(&num_2, 5);
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_or_equal_first_negative
        s21_decimal num_1 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_or_equal_second_negative
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, -__INT_MAX__}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_less_or_equal_both_negative
        s21_decimal num_1 = {{0, 0, 0, -__INT_MAX__}};
        s21_decimal num_2 = {{0, 0, 0, -__INT_MAX__}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

    #tcase s21_is_greater
        #test is_greater_first_greater
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_first_not_greater
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_first_equal
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_nums_max_decimal
        s21_decimal num_1 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        s21_decimal num_2 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_nums_with_exp
        s21_decimal num_1 = {{__INT_MAX__, 0, 0, 0}};
        set_exp_decimal(&num_1, 0);
        s21_decimal num_2 = {{__INT_MAX__, 0, 0, 0}};
        set_exp_decimal(&num_2, 5);
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_first_negative
        s21_decimal num_1 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_second_negative
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_2, 1);
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_both_negative
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        set_sign_decimal(&num_2, 1);
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_nums_max_decimal_with_exp
        s21_decimal num_1 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        set_exp_decimal(&num_1, 1);
        s21_decimal num_2 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        set_exp_decimal(&num_2, 0);
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 0);


    #test is_greater_or_equal_first_greater
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_first_not_greater
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_or_equal_first_equal
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_first_negative
        s21_decimal num_1 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_or_equal_second_negative
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_2, 1);
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_both_negative
        s21_decimal num_1 = {{0, 0, 0, -__INT_MAX__}};
        s21_decimal num_2 = {{0, 0, 0, -__INT_MAX__}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_nums_max_decimal
        s21_decimal num_1 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        s21_decimal num_2 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_nums_with_exp
        s21_decimal num_1 = {{__INT_MAX__, 0, 0, 0}};
        set_exp_decimal(&num_1, 0);
        s21_decimal num_2 = {{__INT_MAX__, 0, 0, 0}};
        set_exp_decimal(&num_2, 5);
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_nums_max_decimal_with_exp
        s21_decimal num_1 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        set_exp_decimal(&num_1, 1);
        s21_decimal num_2 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        set_exp_decimal(&num_2, 0);
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_or_equal_positive_zero
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_negative_zero
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        set_sign_decimal(&num_2, 1);
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_positive_zero_and_negative_zero
        s21_decimal num_1 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

    #tcase is_equal
        #test is_equal_positive_nums
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_equal_negative_nums
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        set_sign_decimal(&num_2, 1);
        int res = s21_is_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_equal_positive_and_negative_nums
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        set_sign_decimal(&num_2, 1);
        int res = s21_is_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_equal_positive_zero
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_equal_negative_zero
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        set_sign_decimal(&num_2, 1);
        int res = s21_is_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_equal_positive_zero_and_negative_zero
        s21_decimal num_1 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_equal_nums_with_exp
        s21_decimal num_1 = {{1, 0, 0, 0}};
        set_exp_decimal(&num_1, 5);
        s21_decimal num_2 = {{1, 0, 0, 0}};
        set_exp_decimal(&num_2, 5);
        int res = s21_is_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

    #tcase s21_is_not_equal

        #test is_not_equal_positive_nums
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{2, 0, 0, 0}};
        int res = s21_is_not_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_not_equal_negative_nums
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{2, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        set_sign_decimal(&num_2, 1);
        int res = s21_is_not_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_not_equal_positive_and_negative_nums
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        set_sign_decimal(&num_2, 1);
        int res = s21_is_not_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_not_equal_equal_nums
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_not_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_not_equal_positive_zero
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_not_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_not_equal_negative_zero
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_1, 1);
        set_sign_decimal(&num_2, 1);
        int res = s21_is_not_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_not_equal_positive_zero_and_negative_zero
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        set_sign_decimal(&num_2, 1);
        int res = s21_is_not_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);


#suite convertors

    #tcase s21_from_int_to_decimal

        #test from_int_to_decimal_normal
        s21_decimal dst = {{0, 0, 0, 0}};
        int src = 1234567;
        int res = s21_from_int_to_decimal(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(dst.bits[0], 1234567);
        ck_assert_int_eq(dst.bits[1], 0);
        ck_assert_int_eq(dst.bits[2], 0);
        ck_assert_int_eq(dst.bits[3], 0);

        #test from_int_to_decimal_zero
        s21_decimal dst = {{0, 0, 0, 0}};
        int src = 0;
        int res = s21_from_int_to_decimal(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(dst.bits[0], 0);
        ck_assert_int_eq(dst.bits[1], 0);
        ck_assert_int_eq(dst.bits[2], 0);
        ck_assert_int_eq(dst.bits[3], 0);

        #test from_int_to_decimal_min_int
        s21_decimal dst = {{0, 0, 0, 0}};
        int src = -__INT_MAX__;
        int res = s21_from_int_to_decimal(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(dst.bits[0], __INT_MAX__);
        ck_assert_int_eq(dst.bits[1], 0);
        ck_assert_int_eq(dst.bits[2], 0);
        ck_assert_int_eq(get_sign_decimal(dst), 1);

        #test from_int_to_decimal_max_int
        s21_decimal dst = {{0, 0, 0, 0}};
        int src = __INT_MAX__;
        int res = s21_from_int_to_decimal(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(dst.bits[0], __INT_MAX__);
        ck_assert_int_eq(dst.bits[1], 0);
        ck_assert_int_eq(dst.bits[2], 0);
        ck_assert_int_eq(dst.bits[3], 0);

        #test from_int_to_decimal_negative
        s21_decimal dst = {{0, 0, 0, 0}};
        int src = -1;
        int res = s21_from_int_to_decimal(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(dst.bits[0], 1);
        ck_assert_int_eq(dst.bits[1], 0);
        ck_assert_int_eq(dst.bits[2], 0);
        ck_assert_int_eq(get_sign_decimal(dst), 1);

    #tcase s21_from_decimal_to_int

        #test from_decimal_to_int_valid_conversion
        int dst;
        s21_decimal src = {{25, 0, 0, 0}};
        int res = s21_from_decimal_to_int(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(dst, 25);

        #test from_decimal_to_int_overflow
        int dst = 1;
        s21_decimal src = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        int res = s21_from_decimal_to_int(src, &dst);
        ck_assert_int_eq(dst, 1);
        ck_assert_int_eq(res, 1);

        #test from_decimal_to_int_negative
        int dst;
        s21_decimal src = {{25, 0, 0, 0}};
        set_sign_decimal(&src, 1);
        int res = s21_from_decimal_to_int(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(dst, -25);

        #test from_decimal_to_int_zero
        int dst;
        s21_decimal src = {{0, 0, 0, 0}};
        int res = s21_from_decimal_to_int(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(dst, 0);

        #test from_decimal_to_int_with_exp
        int dst;
        s21_decimal src = {{253, 0, 0, 0}};
        set_exp_decimal(&src, 1);
        int res = s21_from_decimal_to_int(src, &dst);
        ck_assert_int_eq(dst, 25);
        ck_assert_int_eq(res, 0);


    #tcase s21_from_decimal_to_float

        #test from_decimal_to_float_valid
        float dst;
        s21_decimal src = {{100, 0, 0, 0}};
        set_exp_decimal(&src, 1);
        int res = s21_from_decimal_to_float(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_float_eq(dst, 10.0);

        #test from_decimal_to_float_overflow
        float dst;
        s21_decimal src = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        int res = s21_from_decimal_to_float(src, &dst);
        ck_assert_float_eq(dst, 39614081257132168796771975168.0);
        ck_assert_int_eq(res, 0);

        #test from_decimal_to_float_negative
        float dst;
        s21_decimal src = {{25, 0, 0, 0}};
        set_sign_decimal(&src, 1);
        int res = s21_from_decimal_to_float(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_float_eq(dst, -25.0f);

        #test from_decimal_to_float_zero
        float dst;
        s21_decimal src = {{0, 0, 0, 0}};
        int res = s21_from_decimal_to_float(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_float_eq(dst, 0.0f);

        #test from_decimal_to_float_negative_zero
        float dst;
        s21_decimal src = {{0, 0, 0, 0}};
        set_sign_decimal(&src, 1);
        int res = s21_from_decimal_to_float(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_float_eq(dst, 0.0);

    #tcase s21_from_float_to_decimal

        #test from_float_to_decimal_normal
        s21_decimal dst;
        float src = 25.5;
        float dst_2;
        int res = s21_from_float_to_decimal(src, &dst);
        s21_from_decimal_to_float(dst, &dst_2);
        ck_assert_int_eq(res, 0);
        ck_assert_float_eq(src, dst_2);

        #test from_float_to_decimal_greater_7_digits
        s21_decimal dst;
        float src = 2.5555555;
        int res = s21_from_float_to_decimal(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(dst.bits[0], 2555556);
        ck_assert_int_eq(get_exp_decimal(dst), 6);

        #test from_float_to_decimal_overflow
        s21_decimal dst;
        float src = __FLT_MAX__;
        int res = s21_from_float_to_decimal(src, &dst);
        ck_assert_int_eq(res, 1);

        #test from_float_to_decimal_min
        s21_decimal dst;
        float src = __FLT_MIN__;
        int res = s21_from_float_to_decimal(src, &dst);
        ck_assert_int_eq(dst.bits[0], 0);
        ck_assert_int_eq(res, 1);

        #test from_float_to_decimal_negative
        s21_decimal dst;
        float src = -25.5;
        float dst_2;
        int res = s21_from_float_to_decimal(src, &dst);
        s21_from_decimal_to_float(dst, &dst_2);
        ck_assert_int_eq(res, 0);
        ck_assert_float_eq(src, dst_2);

        #test from_float_to_decimal_zero
        s21_decimal dst;
        float src = 0;
        int res = s21_from_float_to_decimal(src, &dst);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(dst.bits[0], 0);
        ck_assert_int_eq(get_sign_decimal(dst), 0);


#suite other
    #tcase s21_floor
        #test floor_positive_decimal
        s21_decimal value = {{25, 0, 0, 0}};
        s21_decimal result;
        int res = s21_floor(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 25);

        #test floor_negative_decimal
        s21_decimal value = {{25, 0, 0, 0}};
        set_sign_decimal(&value, 1);
        s21_decimal result;
        int res = s21_floor(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 25);
        ck_assert_int_eq(get_sign_decimal(result), 1);

        #test floor_positive_decimal_with_exp
        s21_decimal value = {{25, 0, 0, 0}};
        set_exp_decimal(&value, 1);
        s21_decimal result;
        int res = s21_floor(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 2);

        #test floor_negative_decimal_with_exp
        s21_decimal value = {{25, 0, 0, 0}};
        set_sign_decimal(&value, 1);
        set_exp_decimal(&value, 1);
        s21_decimal result;
        int res = s21_floor(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 3);
        ck_assert_int_eq(get_sign_decimal(result), 1);

        #test floor_positive_decimal_max
        s21_decimal value = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        s21_decimal result;
        int res = s21_floor(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], __INT_MAX__);
        ck_assert_int_eq(result.bits[1], __INT_MAX__);
        ck_assert_int_eq(result.bits[2], __INT_MAX__);

    #tcase s21_round
        #test round_positive_decimal
        s21_decimal value = {{25, 0, 0, 0}};
        s21_decimal result;
        int res = s21_round(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 25);

        #test round_negative_decimal
        s21_decimal value = {{25, 0, 0, 0}};
        set_sign_decimal(&value, 1);
        s21_decimal result;
        int res = s21_round(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 25);
        ck_assert_int_eq(get_sign_decimal(result), 1);

        #test round_positive_decimal_with_exp
        s21_decimal value = {{25, 0, 0, 0}};
        set_exp_decimal(&value, 1);
        s21_decimal result;
        int res = s21_round(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 3);

        #test round_negative_decimal_with_exp
        s21_decimal value = {{25, 0, 0, 0}};
        set_sign_decimal(&value, 1);
        set_exp_decimal(&value, 1);
        s21_decimal result;
        int res = s21_round(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 3);
        ck_assert_int_eq(get_sign_decimal(result), 1);

        #test round_positive_decimal_max
        s21_decimal value = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        s21_decimal result;
        int res = s21_round(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], __INT_MAX__);
        ck_assert_int_eq(result.bits[1], __INT_MAX__);
        ck_assert_int_eq(result.bits[2], __INT_MAX__);

    #tcase s21_truncate
        #test truncate_positive_decimal
        s21_decimal value = {{25, 0, 0, 0}};
        s21_decimal result;
        int res = s21_truncate(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 25);

        #test truncate_negative_decimal
        s21_decimal value = {{25, 0, 0, 0}};
        set_sign_decimal(&value, 1);
        s21_decimal result;
        int res = s21_truncate(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 25);
        ck_assert_int_eq(get_sign_decimal(result), 1);

        #test truncate_positive_decimal_with_exp
        s21_decimal value = {{25, 0, 0, 0}};
        set_exp_decimal(&value, 1);
        s21_decimal result;
        int res = s21_truncate(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 2);

        #test truncate_negative_decimal_with_exp
        s21_decimal value = {{25, 0, 0, 0}};
        set_sign_decimal(&value, 1);
        set_exp_decimal(&value, 1);
        s21_decimal result;
        int res = s21_truncate(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 2);
        ck_assert_int_eq(get_sign_decimal(result), 1);

        #test truncate_positive_decimal_max
        s21_decimal value = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        s21_decimal result;
        int res = s21_truncate(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], __INT_MAX__);
        ck_assert_int_eq(result.bits[1], __INT_MAX__);
        ck_assert_int_eq(result.bits[2], __INT_MAX__);

    #tcase s21_negate

        #test negate_positive_decimal
        s21_decimal value = {{25, 0, 0, 0}};
        s21_decimal result;
        int res = s21_negate(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 25);
        ck_assert_int_eq(get_sign_decimal(result), 1);

        #test negate_negative_decimal
        s21_decimal value = {{25, 0, 0, 0}};
        set_sign_decimal(&value, 1);
        s21_decimal result;
        int res = s21_negate(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 25);
        ck_assert_int_eq(get_sign_decimal(result), 0);

        #test negate_zero
        s21_decimal value = {{0, 0, 0, 0}};
        s21_decimal result;
        int res = s21_negate(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], 0);
        ck_assert_int_eq(get_sign_decimal(result), 1);

        #test negate_positive_decimal_max
        s21_decimal value = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        s21_decimal result;
        int res = s21_negate(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], __INT_MAX__);
        ck_assert_int_eq(result.bits[1], __INT_MAX__);
        ck_assert_int_eq(result.bits[2], __INT_MAX__);
        ck_assert_int_eq(get_sign_decimal(result), 1);

        #test negate_positive_decimal_max_with_exp
        s21_decimal value = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        set_exp_decimal(&value, 1);
        s21_decimal result;
        int res = s21_negate(value, &result);
        ck_assert_int_eq(res, 0);
        ck_assert_int_eq(result.bits[0], __INT_MAX__);
        ck_assert_int_eq(result.bits[1], __INT_MAX__);
        ck_assert_int_eq(result.bits[2], __INT_MAX__);
        ck_assert_int_eq(get_exp_decimal(value), 1);
        ck_assert_int_eq(get_sign_decimal(result), 1);


#suite arithmetic_add
    #tcase s21_add_func__zero
        #test zero__plus__zero
            s21_decimal val_1 = {{0, 0, 0, 0}};
            s21_decimal val_2 = {{0, 0, 0, 0}};
            s21_decimal res = {0,};
            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
            ck_assert_int_eq(res.bits[0], 0);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test pos_max__plus__pos_zero
            int int_max = 4294967295;
            s21_decimal val_1 = {{int_max, 0, 0, 0}};
            s21_decimal val_2 = {{0, 0, 0, 0}};
            s21_decimal res = {0,};
            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
            ck_assert_int_eq(res.bits[0], int_max);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test zero__plus__pos_max
            int int_max = 4294967295;
            s21_decimal val_1 = {{0, 0, 0, 0}};
            s21_decimal val_2 = {{int_max, 0, 0, 0}};
            s21_decimal res = {0,};
            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
            ck_assert_int_eq(res.bits[0], int_max);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);

    #tcase s21_add_func__one_int
        #test pos_norm__plus__neg_norm_res_zero
            int a = 42949;
            int b = 42949;
            s21_decimal val_1 = {{a, 0, 0, 0}};
            s21_decimal val_2 = {{b, 0, 0, 1 << 31}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], a - b);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test pos_norm__plus__pos_norm
            int a = 7295;
            int b = 42949;
            s21_decimal val_1 = {{a, 0, 0, 0}};
            s21_decimal val_2 = {{b, 0, 0, 0}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], a + b);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test neg_norm__plus__pos_norm
            int int_1 = 756485;
            int int_2 = 537564879;
            s21_decimal val_1 = {{int_1, 0, 0, 1 << 31}};
            s21_decimal val_2 = {{int_2, 0, 0, 0}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], -int_1 + int_2);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test pos_norm__plus__neg_norm_1
            int int_1 = 756485;
            int int_2 = 537564879;
            s21_decimal val_1 = {{int_1, 0, 0, 0}};
            s21_decimal val_2 = {{int_2, 0, 0, 1 << 31}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], int_2 - int_1);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 1 << 31);
        #test neg_norm__plus__neg_norm
            int int_1 = 756485;
            int int_2 = 537564879;
            s21_decimal val_1 = {{int_1, 0, 0, 1 << 31}};
            s21_decimal val_2 = {{int_2, 0, 0, 1 << 31}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], int_1 + int_2);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 1 << 31);
        #test pos_norm__plus__pos_norm__scale
            int a = 7295;   
            int b = 42949;  
            s21_decimal val_1 = {{a, 0, 0, 1 << BIT_EXP_START}};
            s21_decimal val_2 = {{b, 0, 0, 3 << BIT_EXP_START}};
            s21_decimal res = {0,};
            // 729.5 + 42.949 = 772.449
            int status = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(status, 0);
            // print_decimal_in_dec(res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            ck_assert_int_eq(res.bits[0], 772449);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 3 << BIT_EXP_START);
        #test neg_norm__plus__pos_norm_scale
            int int_1 = 756485;
            int int_2 = 537564879;
            s21_decimal val_1 = {{int_1, 0, 0, 1 << 31}};
            set_exp_decimal(&val_1, 6);
            s21_decimal val_2 = {{int_2, 0, 0, 0}};
            set_exp_decimal(&val_2, 8);
            s21_decimal res = {0,};
            // -0.756485 + 5.37564879 = 4.61916379
            int status = s21_add(val_1, val_2, &res);
            //print_decimal_in_dec(val_1);
            //print_decimal_in_dec(val_2);
            //print_decimal_in_dec(res);
            //print_decimal(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], 461916379);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0x00080000);
        #test pos_norm__plus__neg_norm_scale_1
            // 7.56485 - 5375.64879 = 5368.08394
            s21_decimal val_1 = {{756485, 0, 0, 0}};
            s21_decimal val_2 = {{537564879, 0, 0, 1 << 31}};
            set_exp_decimal(&val_1, 5);
            set_exp_decimal(&val_2, 5);
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], 536808394);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], (int)0x80050000);
        #test neg_norm__plus__neg_norm_scale_1
            // -7.56485 - 5.37564879 = -12.94049879
            s21_decimal val_1 = {{756485, 0, 0, 1 << 31}};
            s21_decimal val_2 = {{537564879, 0, 0, 1 << 31}};
            set_exp_decimal(&val_1, 5);
            set_exp_decimal(&val_2, 8);
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], 1294049879);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], (int)0x80080000);
    
    #tcase s21_add_func__three_int
        #test three_int__pos_norm__plus__pos_norm
            // 85833105.762574984579732 + 235467.46665509876438976547 = 86068573.22923008334412176547
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x000f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x00140000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11001000110001001101110010100011);
            ck_assert_int_eq(res.bits[1], (int)0b01100011101010001101010011111001);
            ck_assert_int_eq(res.bits[2], (int)0b11011110011110110110011101110);
            ck_assert_int_eq(res.bits[3], (int)0x00140000);
        #test three_int__neg_norm__plus__pos_norm
            // -85833105.762574984579732 + 235467.46665509876438976547 = -85597638.29591988581534223453
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x800f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x00140000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11011110001000110100110001011101);
            ck_assert_int_eq(res.bits[1], (int)0b00000000000101010011011111000111);
            ck_assert_int_eq(res.bits[2], (int)0b11011101010000111100001111111);
            ck_assert_int_eq(res.bits[3], (int)0x80140000);
        #test three_int__pos_norm__plus__neg_norm_1
            // 85833105.762574984579732 - 235467.46665509876438976547 = 85597638.29591988581534223453
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x000f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x80140000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11011110001000110100110001011101);
            ck_assert_int_eq(res.bits[1], (int)0b00000000000101010011011111000111);
            ck_assert_int_eq(res.bits[2], (int)0b11011101010000111100001111111);
            ck_assert_int_eq(res.bits[3], (int)0x00140000);
        #test three_int__neg_norm__plus__neg_norm
            // -85833105.762574984579732 - 235467.46665509876438976547 = -86068573.22923008334412176547
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x800f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x80140000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11001000110001001101110010100011);
            ck_assert_int_eq(res.bits[1], (int)0b01100011101010001101010011111001);
            ck_assert_int_eq(res.bits[2], (int)0b11011110011110110110011101110);
            ck_assert_int_eq(res.bits[3], (int)0x80140000);

    #tcase s21_add_func__max
        #test pos_max_plus_zero_1
            // 79228162514264337593543950335 + 0 = 79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00000000
            }};
            s21_decimal val_2 = {{
                0b0,
                0b0,
                0b0,
                0x00020000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test pos_max_plus_zero_2
            // -79228162514264337593543950335 + 0 = -79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x80000000
            }};
            s21_decimal val_2 = {{
                0b0,
                0b0,
                0b0,
                0x00020000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);
        #test zero_plus_pos_max_1
            // -0.00 + 79228162514264337593543950335 = 79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b0,
                0b0,
                0b0,
                0x80020000
            }};
            s21_decimal val_2 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00000000
            }};

            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test zero_plus_pos_max_2
            // -0.00 + 79228162514264337593543950335 = -79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b0,
                0b0,
                0b0,
                0x80020000
            }};
            s21_decimal val_2 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x80000000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);
 
    #tcase s21_add_func__bank_round
        #test pos_normal_plus_pos_normal_1
            // 7922816251426433759354395033.5 + 0.1 = 7922816251426433759354395034
            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011010
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00010000
            }};
            s21_decimal val_2 = {{
                0b1,
                0b0,
                0b0,
                0x00010000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test pos_normal_plus_pos_normal_2
            // 7922816251426433759354395033.5+ 1.0 = 7922816251426433759354395034
            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011010
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00010000
            }};
            s21_decimal val_2 = {{
                0b1,
                0b0,
                0b0,
                0x00010000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test pos_normal_plus_pos_normal_3
            // 7922816251426433759354395033.5+ 2.0 = 7922816251426433759354395036
            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011100
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00010000
            }};
            s21_decimal val_2 = {{
                0b10100,            
                0b0,
                0b0,
                0x00010000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011100);
            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test pos_normal_plus_pos_normal_4
            // 7922816251426433759354395033.5+ 1.7 = 7922816251426433759354395035
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00010000
            }};
            s21_decimal val_2 = {{
                0b10001,
                0b0,
                0b0,
                0x00010000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011011);
            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);

    #tcase s21_add_func__error
        #test error_pos_inf_1
            // 79228162514264337593543950335 + 0.1 = -
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1,
                0b0,
                0b0,
                0x00000000
            }};
            s21_decimal val_2 = {{
                0b1001,
                0b0,
                0b0,
                0x00010000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 1);
            // ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
            // ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
            // ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
            // ck_assert_int_eq(res.bits[3], (int)0x00000000);


#suite arithmetic_sub   
    #tcase s21_sub_func__zero
        #test zero__minus__zero
            s21_decimal val_1 = {{0, 0, 0, 0}};
            s21_decimal val_2 = {{0, 0, 0, 0}};
            s21_decimal res = {0,};
            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
            ck_assert_int_eq(res.bits[0], 0);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test pos_max__minus__zero
            // 4294967295 - 0 = 4294967295
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b0, 
                0b0,
                0x00000000
            }};
            s21_decimal val_2 = {{
                0b0,
                0b0,
                0b0,
                0x00000000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test zero__minus__pos_max
            // 0 - 4294967295 = -4294967295
            s21_decimal val_1 = {{
                0b0,
                0b0,
                0b0, 
                0x00000000
            }};
            s21_decimal val_2 = {{
                0b11111111111111111111111111111111,
                0b0,
                0b0,
                0x00000000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            ck_assert_int_eq(status, 0);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], 0b0);
            ck_assert_int_eq(res.bits[2], 0b0);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);

    #tcase s21_sub_func__one_int
        #test pos_norm__minus__pos_norm_1
            // 42949 - 42949 = 0
            int a = 42949;
            int b = 42949;
            s21_decimal val_1 = {{
                a, 
                0, 
                0,
                0x00000000
            }};
            s21_decimal val_2 = {{
                b,
                0, 
                0, 
                0x00000000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], a - b);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test pos_norm__minus__pos_norm_2
            // 7295 - 42949 = -35654
            int a = 7295;
            int b = 42949;
            s21_decimal val_1 = {{
                a, 
                0, 
                0,
                0x00000000
            }};
            s21_decimal val_2 = {{
                b,
                0, 
                0, 
                0x00000000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], b - a);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);
        #test pos_norm__minus__pos_norm_3
            // 8345224 - 42949 = 8302275
            int a = 8345224;
            int b = 42949;
            s21_decimal val_1 = {{
                a, 
                0, 
                0,
                0x00000000
            }};
            s21_decimal val_2 = {{
                b,
                0, 
                0, 
                0x00000000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], a - b);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test neg_norm__minus__pos_norm_1
            // -8345224 - 42949 = 8388173
            int a = 8345224;
            int b = 42949;
            s21_decimal val_1 = {{
                a, 
                0, 
                0,
                0x80000000
            }};
            s21_decimal val_2 = {{
                b,
                0, 
                0, 
                0x00000000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], a + b);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);
        #test pos_norm__minus__neg_norm_1
            // 8345224 + 42949 = 8388173
            int a = 8345224;
            int b = 42949;
            s21_decimal val_1 = {{
                a, 
                0, 
                0,
                0x00000000
            }};
            s21_decimal val_2 = {{
                b,
                0,
                0,
                0x80000000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], a + b);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test neg_norm__minus__neg_norm_1
            // -8345224 + 42949 = -8302275
            int a = 8345224;
            int b = 42949;
            s21_decimal val_1 = {{
                a, 
                0, 
                0,
                0x80000000
            }};
            s21_decimal val_2 = {{
                b,
                0,
                0,
                0x80000000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], a - b);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);
        #test neg_norm__minus__neg_norm_2
            // -8345224 + 55642949 = 47297725
            int a = 8345224;
            int b = 55642949;
            s21_decimal val_1 = {{
                a, 
                0, 
                0,
                0x80000000
            }};
            s21_decimal val_2 = {{
                b,
                0,
                0,
                0x80000000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], -a + b);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);

    #tcase s21_sub_func__three_int
        #test three_int__pos_norm__minus__pos_norm
            // 85833105.762574984579732 - 235467.46665509876438976547 = 85597638.29591988581534223453
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x000f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x00140000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11011110001000110100110001011101);
            ck_assert_int_eq(res.bits[1], (int)0b00000000000101010011011111000111);
            ck_assert_int_eq(res.bits[2], (int)0b11011101010000111100001111111);
            ck_assert_int_eq(res.bits[3], (int)0x00140000);
        #test three_int__neg_norm__minus__pos_norm
            // -85833105.762574984579732 - 235467.46665509876438976547 = -86068573.22923008334412176547
            //    11011110011110110110011101110 01100011101010001101010011111001 11001000110001001101110010100011
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x800f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x00140000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11001000110001001101110010100011);
            ck_assert_int_eq(res.bits[1], (int)0b01100011101010001101010011111001);
            ck_assert_int_eq(res.bits[2], (int)0b11011110011110110110011101110);
            ck_assert_int_eq(res.bits[3], (int)0x80140000);
        #test three_int__pos_norm__minus__neg_norm_1
            // 85833105.762574984579732 + 235467.46665509876438976547 = 86068573.22923008334412176547
            //      
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x000f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x80140000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11001000110001001101110010100011);
            ck_assert_int_eq(res.bits[1], (int)0b01100011101010001101010011111001);
            ck_assert_int_eq(res.bits[2], (int)0b11011110011110110110011101110);
            ck_assert_int_eq(res.bits[3], (int)0x00140000);
        #test three_int__neg_norm__minus__neg_norm
            // -85833105.762574984579732 - 235467.46665509876438976547 = -86068573.22923008334412176547
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x800f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x80140000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11001000110001001101110010100011);
            ck_assert_int_eq(res.bits[1], (int)0b01100011101010001101010011111001);
            ck_assert_int_eq(res.bits[2], (int)0b11011110011110110110011101110);
            ck_assert_int_eq(res.bits[3], (int)0x80140000);

    #tcase s21_sub_func__max
        #test pos_max_minus_zero_1
            // 79228162514264337593543950335 - 0 = 79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00000000
            }};
            s21_decimal val_2 = {{
                0b0,
                0b0,
                0b0,
                0x00020000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test neg_max_minus_zero_1
            // -79228162514264337593543950335 - 0 = -79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x80000000
            }};
            s21_decimal val_2 = {{
                0b0,
                0b0,
                0b0,
                0x00020000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);
        #test zero_minus_pos_max_1
            // -0.00 - 79228162514264337593543950335 = -79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b0,
                0b0,
                0b0,
                0x80020000
            }};
            s21_decimal val_2 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00000000
            }};

            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);
        #test zero_minus_neg_max_1
            // -0.00 + 79228162514264337593543950335 = 79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b0,
                0b0,
                0b0,
                0x80020000
            }};
            s21_decimal val_2 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x80000000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
 
//    #tcase s21_sub_func__bank_round
//        #test pos_normal_minus_pos_normal_1
//            printf("____________________________\n");
//            // 79228162514264337593543950335 - 0.6 = 79228162514264337593543950334
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00000000
//            }};
//            s21_decimal val_2 = {{
//                0b110,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_sub(val_1, val_2, &res);
//            print_decimal_in_dec(val_1);
//            print_decimal_in_dec(val_2);
//            print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b111111111111111111111111111111110);
//            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[2], (int)0b1111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//        #test pos_normal_plus_pos_normal_2
//            // 7922816251426433759354395033.5+ 1.0 = 7922816251426433759354395034
//            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011010
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00010000
//            }};
//            s21_decimal val_2 = {{
//                0b1,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
//            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//        #test pos_normal_plus_pos_normal_3
//            // 7922816251426433759354395033.5+ 2.0 = 7922816251426433759354395036
//            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011100
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00010000
//            }};
//            s21_decimal val_2 = {{
//                0b10100,            
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011100);
//            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//        #test pos_normal_plus_pos_normal_4
//            // 7922816251426433759354395033.5+ 1.7 = 7922816251426433759354395035
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00010000
//            }};
//            s21_decimal val_2 = {{
//                0b10001,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011011);
//            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//
//    #tcase s21_add_func__error
//        #test error_pos_inf_1
//            // 79228162514264337593543950335 + 0.1 = -
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b1,
//                0b0,
//                0b0,
//                0x00000000
//            }};
//            s21_decimal val_2 = {{
//                0b1001,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 1);
//            // ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
//            // ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            // ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            // ck_assert_int_eq(res.bits[3], (int)0x00000000);
//    

#suite arithmetic_mul  
    #tcase s21_mul_func__zero
        #test zero__mul__zero
            s21_decimal val_1 = {{0, 0, 0, 0}};
            s21_decimal val_2 = {{0, 0, 0, 0}};
            s21_decimal res = {0,};
            ck_assert_int_eq(s21_mul(val_1, val_2, &res), 0);
            ck_assert_int_eq(res.bits[0], 0);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test pos_max__mul__zero
            // 4294967295 * 0 = 0
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b0, 
                0b0,
                0x00000000
            }};
            s21_decimal val_2 = {{
                0b0,
                0b0,
                0b0,
                0x00000000
            }};
            s21_decimal res = {0,};
            int status = s21_div(val_1, val_2, &res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], 0);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test zero__mul__pos_max
            // 0 * 4294967295 = 0
            s21_decimal val_1 = {{
                0b0,
                0b0,
                0b0, 
                0x00000000
            }};
            s21_decimal val_2 = {{
                0b11111111111111111111111111111111,
                0b0,
                0b0,
                0x00000000
            }};
            s21_decimal res = {0,};
            int status = s21_mul(val_1, val_2, &res);
            ck_assert_int_eq(status, 0);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(res.bits[0], 0b0);
            ck_assert_int_eq(res.bits[1], 0b0);
            ck_assert_int_eq(res.bits[2], 0b0);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);

    #tcase s21_mul_func
        #test pos_norm__mul__pos_norm
            // 85833105.762574984579732 * 235467.46665509876438976547 = 85597638.29591988581534223453
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x000f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x00140000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11011110001000110100110001011101);
            ck_assert_int_eq(res.bits[1], (int)0b00000000000101010011011111000111);
            ck_assert_int_eq(res.bits[2], (int)0b11011101010000111100001111111);
            ck_assert_int_eq(res.bits[3], (int)0x00140000);
        #test three_int__neg_norm__minus__pos_norm
            // -85833105.762574984579732 - 235467.46665509876438976547 = -86068573.22923008334412176547
            //    11011110011110110110011101110 01100011101010001101010011111001 11001000110001001101110010100011
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x800f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x00140000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11001000110001001101110010100011);
            ck_assert_int_eq(res.bits[1], (int)0b01100011101010001101010011111001);
            ck_assert_int_eq(res.bits[2], (int)0b11011110011110110110011101110);
            ck_assert_int_eq(res.bits[3], (int)0x80140000);
        #test three_int__pos_norm__minus__neg_norm_1
            // 85833105.762574984579732 + 235467.46665509876438976547 = 86068573.22923008334412176547
            //      
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x000f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x80140000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11001000110001001101110010100011);
            ck_assert_int_eq(res.bits[1], (int)0b01100011101010001101010011111001);
            ck_assert_int_eq(res.bits[2], (int)0b11011110011110110110011101110);
            ck_assert_int_eq(res.bits[3], (int)0x00140000);
        #test three_int__neg_norm__minus__neg_norm
            // -85833105.762574984579732 - 235467.46665509876438976547 = -86068573.22923008334412176547
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x800f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x80140000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11001000110001001101110010100011);
            ck_assert_int_eq(res.bits[1], (int)0b01100011101010001101010011111001);
            ck_assert_int_eq(res.bits[2], (int)0b11011110011110110110011101110);
            ck_assert_int_eq(res.bits[3], (int)0x80140000);

    #tcase s21_sub_func__max
        #test pos_max_minus_zero_1
            // 79228162514264337593543950335 - 0 = 79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00000000
            }};
            s21_decimal val_2 = {{
                0b0,
                0b0,
                0b0,
                0x00020000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test neg_max_minus_zero_1
            // -79228162514264337593543950335 - 0 = -79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x80000000
            }};
            s21_decimal val_2 = {{
                0b0,
                0b0,
                0b0,
                0x00020000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);
        #test zero_minus_pos_max_1
            // -0.00 - 79228162514264337593543950335 = -79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b0,
                0b0,
                0b0,
                0x80020000
            }};
            s21_decimal val_2 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00000000
            }};

            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);
        #test zero_minus_neg_max_1
            // -0.00 + 79228162514264337593543950335 = 79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b0,
                0b0,
                0b0,
                0x80020000
            }};
            s21_decimal val_2 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x80000000
            }};
            s21_decimal res = {0,};
            int status = s21_sub(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
 
//    #tcase s21_sub_func__bank_round
//        #test pos_normal_minus_pos_normal_1
//            printf("____________________________\n");
//            // 79228162514264337593543950335 - 0.6 = 79228162514264337593543950334
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00000000
//            }};
//            s21_decimal val_2 = {{
//                0b110,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_sub(val_1, val_2, &res);
//            print_decimal_in_dec(val_1);
//            print_decimal_in_dec(val_2);
//            print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b111111111111111111111111111111110);
//            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[2], (int)0b1111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//        #test pos_normal_plus_pos_normal_2
//            // 7922816251426433759354395033.5+ 1.0 = 7922816251426433759354395034
//            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011010
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00010000
//            }};
//            s21_decimal val_2 = {{
//                0b1,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
//            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//        #test pos_normal_plus_pos_normal_3
//            // 7922816251426433759354395033.5+ 2.0 = 7922816251426433759354395036
//            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011100
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00010000
//            }};
//            s21_decimal val_2 = {{
//                0b10100,            
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011100);
//            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//        #test pos_normal_plus_pos_normal_4
//            // 7922816251426433759354395033.5+ 1.7 = 7922816251426433759354395035
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00010000
//            }};
//            s21_decimal val_2 = {{
//                0b10001,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011011);
//            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//
//    #tcase s21_add_func__error
//        #test error_pos_inf_1
//            // 79228162514264337593543950335 + 0.1 = -
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b1,
//                0b0,
//                0b0,
//                0x00000000
//            }};
//            s21_decimal val_2 = {{
//                0b1001,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 1);
//            // ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
//            // ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            // ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            // ck_assert_int_eq(res.bits[3], (int)0x00000000);
//    