#include "s21_decimal.h"

#include <check.h>


#suite arithmetic
    #tcase s21_add_func
        #test zero__plus__zero
            s21_decimal val_1 = {{0, 0, 0, 0}};
            s21_decimal val_2 = {{0, 0, 0, 0}};
            s21_decimal res = {0,};
            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
            ck_assert_int_eq(res.bits[0], 0);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test one_int__pos_max__plus__pos_zero
            int int_max = 4294967295;
            s21_decimal val_1 = {{int_max, 0, 0, 0}};
            s21_decimal val_2 = {{0, 0, 0, 0}};
            s21_decimal res = {0,};
            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
            ck_assert_int_eq(res.bits[0], int_max);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test one_int__zero__plus__pos_max
            int int_max = 4294967295;
            s21_decimal val_1 = {{0, 0, 0, 0}};
            s21_decimal val_2 = {{int_max, 0, 0, 0}};
            s21_decimal res = {0,};
            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
            ck_assert_int_eq(res.bits[0], int_max);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test pos_norm__plus__pos_norm__1
            int a = 7295;
            int b = 42949;
            s21_decimal val_1 = {{a, 0, 0, 0}};
            s21_decimal val_2 = {{b, 0, 0, 0}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], a + b);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test neg_norm__plus__pos_norm__1
            int int_1 = 756485;
            int int_2 = 537564879;
            s21_decimal val_1 = {{int_1, 0, 0, 1 << 31}};
            s21_decimal val_2 = {{int_2, 0, 0, 0}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], -int_1 + int_2);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test pos_norm__plus__neg_norm_1__1
            int int_1 = 756485;
            int int_2 = 537564879;
            s21_decimal val_1 = {{int_1, 0, 0, 0}};
            s21_decimal val_2 = {{int_2, 0, 0, 1 << 31}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], int_2 - int_1);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 1 << 31);
        #test neg_norm__plus__neg_norm_1
            int int_1 = 756485;
            int int_2 = 537564879;
            s21_decimal val_1 = {{int_1, 0, 0, 1 << 31}};
            s21_decimal val_2 = {{int_2, 0, 0, 1 << 31}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], int_1 + int_2);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 1 << 31);