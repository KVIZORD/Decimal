#include "s21_decimal.h"
#include "common/common.h"

#include <check.h>


#suite arithmetic_add
    #tcase s21_add_func__zero
        #test zero__plus__zero
            s21_decimal val_1 = {{0, 0, 0, 0}};
            s21_decimal val_2 = {{0, 0, 0, 0}};
            s21_decimal res = {0,};
            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
            ck_assert_int_eq(res.bits[0], 0);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test pos_max__plus__pos_zero
            int int_max = 4294967295;
            s21_decimal val_1 = {{int_max, 0, 0, 0}};
            s21_decimal val_2 = {{0, 0, 0, 0}};
            s21_decimal res = {0,};
            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
            ck_assert_int_eq(res.bits[0], int_max);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test zero__plus__pos_max
            int int_max = 4294967295;
            s21_decimal val_1 = {{0, 0, 0, 0}};
            s21_decimal val_2 = {{int_max, 0, 0, 0}};
            s21_decimal res = {0,};
            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
            ck_assert_int_eq(res.bits[0], int_max);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);

    #tcase s21_add_func__one_int
        #test pos_norm__plus__neg_norm_res_zero
            int a = 42949;
            int b = 42949;
            s21_decimal val_1 = {{a, 0, 0, 0}};
            s21_decimal val_2 = {{b, 0, 0, 1 << 31}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            print_decimal_in_dec(res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], a - b);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test pos_norm__plus__pos_norm
            int a = 7295;
            int b = 42949;
            s21_decimal val_1 = {{a, 0, 0, 0}};
            s21_decimal val_2 = {{b, 0, 0, 0}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], a + b);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test neg_norm__plus__pos_norm
            int int_1 = 756485;
            int int_2 = 537564879;
            s21_decimal val_1 = {{int_1, 0, 0, 1 << 31}};
            s21_decimal val_2 = {{int_2, 0, 0, 0}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], -int_1 + int_2);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0);
        #test pos_norm__plus__neg_norm_1
            int int_1 = 756485;
            int int_2 = 537564879;
            s21_decimal val_1 = {{int_1, 0, 0, 0}};
            s21_decimal val_2 = {{int_2, 0, 0, 1 << 31}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], int_2 - int_1);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 1 << 31);
        #test neg_norm__plus__neg_norm
            int int_1 = 756485;
            int int_2 = 537564879;
            s21_decimal val_1 = {{int_1, 0, 0, 1 << 31}};
            s21_decimal val_2 = {{int_2, 0, 0, 1 << 31}};
            s21_decimal res = {0,};
            int r = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(r, 0);
            ck_assert_int_eq(res.bits[0], int_1 + int_2);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 1 << 31);
        #test pos_norm__plus__pos_norm__scale
            int a = 7295;   
            int b = 42949;  
            s21_decimal val_1 = {{a, 0, 0, 1 << BIT_EXP_START}};
            s21_decimal val_2 = {{b, 0, 0, 3 << BIT_EXP_START}};
            s21_decimal res = {0,};
            // 729.5 + 42.949 = 772.449
            int status = s21_add(val_1, val_2, &res);
            ck_assert_int_eq(status, 0);
            // print_decimal_in_dec(res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            ck_assert_int_eq(res.bits[0], 772449);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 3 << BIT_EXP_START);
        #test neg_norm__plus__pos_norm_scale
            int int_1 = 756485;
            int int_2 = 537564879;
            s21_decimal val_1 = {{int_1, 0, 0, 1 << 31}};
            set_exp_decimal(&val_1, 6);
            s21_decimal val_2 = {{int_2, 0, 0, 0}};
            set_exp_decimal(&val_2, 8);
            s21_decimal res = {0,};
            // -0.756485 + 5.37564879 = 4.61916379
            int status = s21_add(val_1, val_2, &res);
            //print_decimal_in_dec(val_1);
            //print_decimal_in_dec(val_2);
            //print_decimal_in_dec(res);
            //print_decimal(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], 461916379);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], 0x00080000);
        #test pos_norm__plus__neg_norm_scale_1
            // 7.56485 - 5375.64879 = 5368.08394
            s21_decimal val_1 = {{756485, 0, 0, 0}};
            s21_decimal val_2 = {{537564879, 0, 0, 1 << 31}};
            set_exp_decimal(&val_1, 5);
            set_exp_decimal(&val_2, 5);
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], 536808394);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], (int)0x80050000);
        #test neg_norm__plus__neg_norm_scale_1
            // -7.56485 - 5.37564879 = -12.94049879
            s21_decimal val_1 = {{756485, 0, 0, 1 << 31}};
            s21_decimal val_2 = {{537564879, 0, 0, 1 << 31}};
            set_exp_decimal(&val_1, 5);
            set_exp_decimal(&val_2, 8);
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], 1294049879);
            ck_assert_int_eq(res.bits[1], 0);
            ck_assert_int_eq(res.bits[2], 0);
            ck_assert_int_eq(res.bits[3], (int)0x80080000);
    
    #tcase s21_add_func__three_int
        #test three_int__pos_norm__plus__pos_norm
            // 85833105.762574984579732 + 235467.46665509876438976547 = 86068573.22923008334412176547
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x000f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x00140000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11001000110001001101110010100011);
            ck_assert_int_eq(res.bits[1], (int)0b01100011101010001101010011111001);
            ck_assert_int_eq(res.bits[2], (int)0b11011110011110110110011101110);
            ck_assert_int_eq(res.bits[3], (int)0x00140000);
        #test three_int__neg_norm__plus__pos_norm
            // -85833105.762574984579732 + 235467.46665509876438976547 = -85597638.29591988581534223453
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x800f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x00140000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11011110001000110100110001011101);
            ck_assert_int_eq(res.bits[1], (int)0b00000000000101010011011111000111);
            ck_assert_int_eq(res.bits[2], (int)0b11011101010000111100001111111);
            ck_assert_int_eq(res.bits[3], (int)0x80140000);
        #test three_int__pos_norm__plus__neg_norm_1
            // 85833105.762574984579732 - 235467.46665509876438976547 = 85597638.29591988581534223453
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x000f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x80140000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11011110001000110100110001011101);
            ck_assert_int_eq(res.bits[1], (int)0b00000000000101010011011111000111);
            ck_assert_int_eq(res.bits[2], (int)0b11011101010000111100001111111);
            ck_assert_int_eq(res.bits[3], (int)0x00140000);
        #test three_int__neg_norm__plus__neg_norm
            // -85833105.762574984579732 - 235467.46665509876438976547 = -86068573.22923008334412176547
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b1000101010010100,
                0b101101000001110111111000111,
                0b1001000101101,
                0x800f0000
            }};
            s21_decimal val_2 = {{
                0b11110101010100001100100000100011,
                0b10110001110010011100111010011000,
                0b100110111101000110111,
                0x80140000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11001000110001001101110010100011);
            ck_assert_int_eq(res.bits[1], (int)0b01100011101010001101010011111001);
            ck_assert_int_eq(res.bits[2], (int)0b11011110011110110110011101110);
            ck_assert_int_eq(res.bits[3], (int)0x80140000);

    #tcase s21_add_func__max
        #test pos_max_plus_zero_1
            // 79228162514264337593543950335 + 0 = 79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00000000
            }};
            s21_decimal val_2 = {{
                0b0,
                0b0,
                0b0,
                0x00020000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test pos_max_plus_zero_2
            // -79228162514264337593543950335 + 0 = -79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x80000000
            }};
            s21_decimal val_2 = {{
                0b0,
                0b0,
                0b0,
                0x00020000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);
        #test zero_plus_pos_max_1
            // -0.00 + 79228162514264337593543950335 = 79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b0,
                0b0,
                0b0,
                0x80020000
            }};
            s21_decimal val_2 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00000000
            }};

            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test zero_plus_pos_max_2
            // -0.00 + 79228162514264337593543950335 = -79228162514264337593543950335
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b0,
                0b0,
                0b0,
                0x80020000
            }};
            s21_decimal val_2 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x80000000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
            ck_assert_int_eq(res.bits[3], (int)0x80000000);
 
    #tcase s21_add_func__bank_round
        #test pos_normal_plus_pos_normal_1
            // 7922816251426433759354395033.5 + 0.1 = 7922816251426433759354395034
            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011010
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00010000
            }};
            s21_decimal val_2 = {{
                0b1,
                0b0,
                0b0,
                0x00010000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test pos_normal_plus_pos_normal_2
            // 7922816251426433759354395033.5+ 1.0 = 7922816251426433759354395034
            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011010
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00010000
            }};
            s21_decimal val_2 = {{
                0b1,
                0b0,
                0b0,
                0x00010000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test pos_normal_plus_pos_normal_3
            // 7922816251426433759354395033.5+ 2.0 = 7922816251426433759354395036
            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011100
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00010000
            }};
            s21_decimal val_2 = {{
                0b10100,            
                0b0,
                0b0,
                0x00010000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011100);
            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);
        #test pos_normal_plus_pos_normal_4
            // 7922816251426433759354395033.5+ 1.7 = 7922816251426433759354395035
            //                                ||                              ||                               |
            s21_decimal val_1 = {{
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0b11111111111111111111111111111111,
                0x00010000
            }};
            s21_decimal val_2 = {{
                0b10001,
                0b0,
                0b0,
                0x00010000
            }};
            s21_decimal res = {0,};
            int status = s21_add(val_1, val_2, &res);
            // print_decimal_in_dec(val_1);
            // print_decimal_in_dec(val_2);
            // print_decimal_in_dec(res);
            ck_assert_int_eq(status, 0);
            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011011);
            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
            ck_assert_int_eq(res.bits[3], (int)0x00000000);

#suite arithmetic_sub
//    #tcase s21_add_func__error
//        #test error_pos_inf_1
//            // 79228162514264337593543950335 + 0.1 = -
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b1,
//                0b0,
//                0b0,
//                0x00000000
//            }};
//            s21_decimal val_2 = {{
//                0b1001,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 1);
//            // ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
//            // ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            // ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            // ck_assert_int_eq(res.bits[3], (int)0x00000000);
//    
//        #tcase s21_add_func__zero
//        #test zero__plus__zero
//            s21_decimal val_1 = {{0, 0, 0, 0}};
//            s21_decimal val_2 = {{0, 0, 0, 0}};
//            s21_decimal res = {0,};
//            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
//            ck_assert_int_eq(res.bits[0], 0);
//            ck_assert_int_eq(res.bits[1], 0);
//            ck_assert_int_eq(res.bits[2], 0);
//            ck_assert_int_eq(res.bits[3], 0);
//        #test pos_max__plus__pos_zero
//            int int_max = 4294967295;
//            s21_decimal val_1 = {{int_max, 0, 0, 0}};
//            s21_decimal val_2 = {{0, 0, 0, 0}};
//            s21_decimal res = {0,};
//            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
//            ck_assert_int_eq(res.bits[0], int_max);
//            ck_assert_int_eq(res.bits[1], 0);
//            ck_assert_int_eq(res.bits[2], 0);
//            ck_assert_int_eq(res.bits[3], 0);
//        #test zero__plus__pos_max
//            int int_max = 4294967295;
//            s21_decimal val_1 = {{0, 0, 0, 0}};
//            s21_decimal val_2 = {{int_max, 0, 0, 0}};
//            s21_decimal res = {0,};
//            ck_assert_int_eq(s21_add(val_1, val_2, &res), 0);
//            ck_assert_int_eq(res.bits[0], int_max);
//            ck_assert_int_eq(res.bits[1], 0);
//            ck_assert_int_eq(res.bits[2], 0);
//            ck_assert_int_eq(res.bits[3], 0);
//
//    #tcase s21_add_func__one_int
//        #test pos_norm__plus__neg_norm_res_zero
//            int a = 42949;
//            int b = 42949;
//            s21_decimal val_1 = {{a, 0, 0, 0}};
//            s21_decimal val_2 = {{b, 0, 0, 1 << 31}};
//            s21_decimal res = {0,};
//            int r = s21_add(val_1, val_2, &res);
//            print_decimal_in_dec(res);
//            ck_assert_int_eq(r, 0);
//            ck_assert_int_eq(res.bits[0], a - b);
//            ck_assert_int_eq(res.bits[1], 0);
//            ck_assert_int_eq(res.bits[2], 0);
//            ck_assert_int_eq(res.bits[3], 0);
//        #test pos_norm__plus__pos_norm
//            int a = 7295;
//            int b = 42949;
//            s21_decimal val_1 = {{a, 0, 0, 0}};
//            s21_decimal val_2 = {{b, 0, 0, 0}};
//            s21_decimal res = {0,};
//            int r = s21_add(val_1, val_2, &res);
//            ck_assert_int_eq(r, 0);
//            ck_assert_int_eq(res.bits[0], a + b);
//            ck_assert_int_eq(res.bits[1], 0);
//            ck_assert_int_eq(res.bits[2], 0);
//            ck_assert_int_eq(res.bits[3], 0);
//        #test neg_norm__plus__pos_norm
//            int int_1 = 756485;
//            int int_2 = 537564879;
//            s21_decimal val_1 = {{int_1, 0, 0, 1 << 31}};
//            s21_decimal val_2 = {{int_2, 0, 0, 0}};
//            s21_decimal res = {0,};
//            int r = s21_add(val_1, val_2, &res);
//            ck_assert_int_eq(r, 0);
//            ck_assert_int_eq(res.bits[0], -int_1 + int_2);
//            ck_assert_int_eq(res.bits[1], 0);
//            ck_assert_int_eq(res.bits[2], 0);
//            ck_assert_int_eq(res.bits[3], 0);
//        #test pos_norm__plus__neg_norm_1
//            int int_1 = 756485;
//            int int_2 = 537564879;
//            s21_decimal val_1 = {{int_1, 0, 0, 0}};
//            s21_decimal val_2 = {{int_2, 0, 0, 1 << 31}};
//            s21_decimal res = {0,};
//            int r = s21_add(val_1, val_2, &res);
//            ck_assert_int_eq(r, 0);
//            ck_assert_int_eq(res.bits[0], int_2 - int_1);
//            ck_assert_int_eq(res.bits[1], 0);
//            ck_assert_int_eq(res.bits[2], 0);
//            ck_assert_int_eq(res.bits[3], 1 << 31);
//        #test neg_norm__plus__neg_norm
//            int int_1 = 756485;
//            int int_2 = 537564879;
//            s21_decimal val_1 = {{int_1, 0, 0, 1 << 31}};
//            s21_decimal val_2 = {{int_2, 0, 0, 1 << 31}};
//            s21_decimal res = {0,};
//            int r = s21_add(val_1, val_2, &res);
//            ck_assert_int_eq(r, 0);
//            ck_assert_int_eq(res.bits[0], int_1 + int_2);
//            ck_assert_int_eq(res.bits[1], 0);
//            ck_assert_int_eq(res.bits[2], 0);
//            ck_assert_int_eq(res.bits[3], 1 << 31);
//        #test pos_norm__plus__pos_norm__scale
//            int a = 7295;   
//            int b = 42949;  
//            s21_decimal val_1 = {{a, 0, 0, 1 << BIT_EXP_START}};
//            s21_decimal val_2 = {{b, 0, 0, 3 << BIT_EXP_START}};
//            s21_decimal res = {0,};
//            // 729.5 + 42.949 = 772.449
//            int status = s21_add(val_1, val_2, &res);
//            ck_assert_int_eq(status, 0);
//            // print_decimal_in_dec(res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            ck_assert_int_eq(res.bits[0], 772449);
//            ck_assert_int_eq(res.bits[1], 0);
//            ck_assert_int_eq(res.bits[2], 0);
//            ck_assert_int_eq(res.bits[3], 3 << BIT_EXP_START);
//        #test neg_norm__plus__pos_norm_scale
//            int int_1 = 756485;
//            int int_2 = 537564879;
//            s21_decimal val_1 = {{int_1, 0, 0, 1 << 31}};
//            set_exp_decimal(&val_1, 6);
//            s21_decimal val_2 = {{int_2, 0, 0, 0}};
//            set_exp_decimal(&val_2, 8);
//            s21_decimal res = {0,};
//            // -0.756485 + 5.37564879 = 4.61916379
//            int status = s21_add(val_1, val_2, &res);
//            //print_decimal_in_dec(val_1);
//            //print_decimal_in_dec(val_2);
//            //print_decimal_in_dec(res);
//            //print_decimal(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], 461916379);
//            ck_assert_int_eq(res.bits[1], 0);
//            ck_assert_int_eq(res.bits[2], 0);
//            ck_assert_int_eq(res.bits[3], 0x00080000);
//        #test pos_norm__plus__neg_norm_scale_1
//            // 7.56485 - 5375.64879 = 5368.08394
//            s21_decimal val_1 = {{756485, 0, 0, 0}};
//            s21_decimal val_2 = {{537564879, 0, 0, 1 << 31}};
//            set_exp_decimal(&val_1, 5);
//            set_exp_decimal(&val_2, 5);
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], 536808394);
//            ck_assert_int_eq(res.bits[1], 0);
//            ck_assert_int_eq(res.bits[2], 0);
//            ck_assert_int_eq(res.bits[3], (int)0x80050000);
//        #test neg_norm__plus__neg_norm_scale_1
//            // -7.56485 - 5.37564879 = -12.94049879
//            s21_decimal val_1 = {{756485, 0, 0, 1 << 31}};
//            s21_decimal val_2 = {{537564879, 0, 0, 1 << 31}};
//            set_exp_decimal(&val_1, 5);
//            set_exp_decimal(&val_2, 8);
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], 1294049879);
//            ck_assert_int_eq(res.bits[1], 0);
//            ck_assert_int_eq(res.bits[2], 0);
//            ck_assert_int_eq(res.bits[3], (int)0x80080000);
//    
//    #tcase s21_add_func__three_int
//        #test three_int__pos_norm__plus__pos_norm
//            // 85833105.762574984579732 + 235467.46665509876438976547 = 86068573.22923008334412176547
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b1000101010010100,
//                0b101101000001110111111000111,
//                0b1001000101101,
//                0x000f0000
//            }};
//            s21_decimal val_2 = {{
//                0b11110101010100001100100000100011,
//                0b10110001110010011100111010011000,
//                0b100110111101000110111,
//                0x00140000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b11001000110001001101110010100011);
//            ck_assert_int_eq(res.bits[1], (int)0b01100011101010001101010011111001);
//            ck_assert_int_eq(res.bits[2], (int)0b11011110011110110110011101110);
//            ck_assert_int_eq(res.bits[3], (int)0x00140000);
//        #test three_int__neg_norm__plus__pos_norm
//            // -85833105.762574984579732 + 235467.46665509876438976547 = -85597638.29591988581534223453
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b1000101010010100,
//                0b101101000001110111111000111,
//                0b1001000101101,
//                0x800f0000
//            }};
//            s21_decimal val_2 = {{
//                0b11110101010100001100100000100011,
//                0b10110001110010011100111010011000,
//                0b100110111101000110111,
//                0x00140000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b11011110001000110100110001011101);
//            ck_assert_int_eq(res.bits[1], (int)0b00000000000101010011011111000111);
//            ck_assert_int_eq(res.bits[2], (int)0b11011101010000111100001111111);
//            ck_assert_int_eq(res.bits[3], (int)0x80140000);
//        #test three_int__pos_norm__plus__neg_norm_1
//            // 85833105.762574984579732 - 235467.46665509876438976547 = 85597638.29591988581534223453
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b1000101010010100,
//                0b101101000001110111111000111,
//                0b1001000101101,
//                0x000f0000
//            }};
//            s21_decimal val_2 = {{
//                0b11110101010100001100100000100011,
//                0b10110001110010011100111010011000,
//                0b100110111101000110111,
//                0x80140000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b11011110001000110100110001011101);
//            ck_assert_int_eq(res.bits[1], (int)0b00000000000101010011011111000111);
//            ck_assert_int_eq(res.bits[2], (int)0b11011101010000111100001111111);
//            ck_assert_int_eq(res.bits[3], (int)0x00140000);
//        #test three_int__neg_norm__plus__neg_norm
//            // -85833105.762574984579732 - 235467.46665509876438976547 = -86068573.22923008334412176547
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b1000101010010100,
//                0b101101000001110111111000111,
//                0b1001000101101,
//                0x800f0000
//            }};
//            s21_decimal val_2 = {{
//                0b11110101010100001100100000100011,
//                0b10110001110010011100111010011000,
//                0b100110111101000110111,
//                0x80140000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b11001000110001001101110010100011);
//            ck_assert_int_eq(res.bits[1], (int)0b01100011101010001101010011111001);
//            ck_assert_int_eq(res.bits[2], (int)0b11011110011110110110011101110);
//            ck_assert_int_eq(res.bits[3], (int)0x80140000);
//
//    #tcase s21_add_func__max
//        #test pos_max_plus_zero_1
//            // 79228162514264337593543950335 + 0 = 79228162514264337593543950335
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00000000
//            }};
//            s21_decimal val_2 = {{
//                0b0,
//                0b0,
//                0b0,
//                0x00020000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//        #test pos_max_plus_zero_2
//            // -79228162514264337593543950335 + 0 = -79228162514264337593543950335
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x80000000
//            }};
//            s21_decimal val_2 = {{
//                0b0,
//                0b0,
//                0b0,
//                0x00020000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[3], (int)0x80000000);
//        #test zero_plus_pos_max_1
//            // -0.00 + 79228162514264337593543950335 = 79228162514264337593543950335
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b0,
//                0b0,
//                0b0,
//                0x80020000
//            }};
//            s21_decimal val_2 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00000000
//            }};
//
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//        #test zero_plus_pos_max_2
//            // -0.00 + 79228162514264337593543950335 = -79228162514264337593543950335
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b0,
//                0b0,
//                0b0,
//                0x80020000
//            }};
//            s21_decimal val_2 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x80000000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[1], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[2], (int)0b11111111111111111111111111111111);
//            ck_assert_int_eq(res.bits[3], (int)0x80000000);
// 
//    #tcase s21_add_func__bank_round
//        #test pos_normal_plus_pos_normal_1
//            // 7922816251426433759354395033.5 + 0.1 = 7922816251426433759354395034
//            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011010
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00010000
//            }};
//            s21_decimal val_2 = {{
//                0b1,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
//            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//        #test pos_normal_plus_pos_normal_2
//            // 7922816251426433759354395033.5+ 1.0 = 7922816251426433759354395034
//            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011010
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00010000
//            }};
//            s21_decimal val_2 = {{
//                0b1,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
//            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//        #test pos_normal_plus_pos_normal_3
//            // 7922816251426433759354395033.5+ 2.0 = 7922816251426433759354395036
//            //    11001100110011001100110011001 10011001100110011001100110011001 10011001100110011001100110011100
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00010000
//            }};
//            s21_decimal val_2 = {{
//                0b10100,            
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011100);
//            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//        #test pos_normal_plus_pos_normal_4
//            // 7922816251426433759354395033.5+ 1.7 = 7922816251426433759354395035
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0b11111111111111111111111111111111,
//                0x00010000
//            }};
//            s21_decimal val_2 = {{
//                0b10001,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 0);
//            ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011011);
//            ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            ck_assert_int_eq(res.bits[3], (int)0x00000000);
//
//    #tcase s21_add_func__error
//        #test error_pos_inf_1
//            // 79228162514264337593543950335 + 0.1 = -
//            //                                ||                              ||                               |
//            s21_decimal val_1 = {{
//                0b1,
//                0b0,
//                0b0,
//                0x00000000
//            }};
//            s21_decimal val_2 = {{
//                0b1001,
//                0b0,
//                0b0,
//                0x00010000
//            }};
//            s21_decimal res = {0,};
//            int status = s21_add(val_1, val_2, &res);
//            // print_decimal_in_dec(val_1);
//            // print_decimal_in_dec(val_2);
//            // print_decimal_in_dec(res);
//            ck_assert_int_eq(status, 1);
//            // ck_assert_int_eq(res.bits[0], (int)0b10011001100110011001100110011010);
//            // ck_assert_int_eq(res.bits[1], (int)0b10011001100110011001100110011001);
//            // ck_assert_int_eq(res.bits[2], (int)0b11001100110011001100110011001);
//            // ck_assert_int_eq(res.bits[3], (int)0x00000000);
//    