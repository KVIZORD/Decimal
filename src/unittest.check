#include "s21_decimal.h"
#include "common/common.h"

#include <check.h>
#include <limits.h>

#suite comparison
    #tcase s21_is_less
        #test is_less_first_less
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_first_not_less
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_less_nums_zeroes
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_less_nums_max_decimal
        s21_decimal num_1 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        s21_decimal num_2 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_less_nums_with_exp
        printf("\nexP\n");
        s21_decimal num_1 = {{25, 0, 0, 0}};
        set_exp_decimal(&num_1, 1);
        s21_decimal num_2 = {{25, 0, 0, 0}};
        set_exp_decimal(&num_2, 0);
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_nums_max_decimal_with_exp
        s21_decimal num_1 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        set_exp_decimal(&num_1, 1);
        s21_decimal num_2 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        set_exp_decimal(&num_2, 0);
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_first_negative
        s21_decimal num_1 = {{0, 0, 0, INT_MIN}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_second_negative
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, INT_MIN}};
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_less_both_negative
        s21_decimal num_1 = {{0, 0, 0, INT_MIN}};
        s21_decimal num_2 = {{0, 0, 0, INT_MIN}};
        int res = s21_is_less(num_1, num_2);
        ck_assert_int_eq(res, 0);

    #tcase s21_is_less_or_equal
        #test is_less_or_equal_first_less
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_or_equal_first_not_less
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_less_or_equal_first_equal
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_or_equal_nums_max_decimal
        s21_decimal num_1 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        s21_decimal num_2 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_or_equal_first_equal_with_exp
        s21_decimal num_1 = {{__INT_MAX__, 0, 0, 0}};
        set_exp_decimal(&num_1, 5);
        s21_decimal num_2 = {{__INT_MAX__, 0, 0, 0}};
        set_exp_decimal(&num_2, 5);
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_or_equal_first_negative
        s21_decimal num_1 = {{0, 0, 0, INT_MIN}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_less_or_equal_second_negative
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, INT_MIN}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_less_or_equal_both_negative
        s21_decimal num_1 = {{0, 0, 0, INT_MIN}};
        s21_decimal num_2 = {{0, 0, 0, INT_MIN}};
        int res = s21_is_less_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

    #tcase s21_is_greater
        #test is_greater_first_greater
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_first_not_greater
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_first_equal
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_nums_max_decimal
        s21_decimal num_1 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        s21_decimal num_2 = {{__INT_MAX__, __INT_MAX__, __INT_MAX__, 0}};
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_nums_with_exp
        s21_decimal num_1 = {{__INT_MAX__, 0, 0, 0}};
        set_exp_decimal(&num_1, 0);
        s21_decimal num_2 = {{__INT_MAX__, 0, 0, 0}};
        set_exp_decimal(&num_2, 5);
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_first_negative
        s21_decimal num_1 = {{0, 0, 0, INT_MIN}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_second_negative
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, INT_MIN}};
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_both_negative
        s21_decimal num_1 = {{0, 0, 0, INT_MIN}};
        s21_decimal num_2 = {{0, 0, 0, INT_MIN}};
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_nums_max_decimal_with_exp
        s21_decimal num_1 = {{INT_MAX, INT_MAX, INT_MAX, 0}};
        set_exp_decimal(&num_1, 1);
        s21_decimal num_2 = {{INT_MAX, INT_MAX, INT_MAX, 0}};
        set_exp_decimal(&num_2, 0);
        int res = s21_is_greater(num_1, num_2);
        ck_assert_int_eq(res, 0);


    #test is_greater_or_equal_first_greater
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_first_not_greater
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_or_equal_first_equal
        s21_decimal num_1 = {{0, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, 0}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_first_negative
        s21_decimal num_1 = {{0, 0, 0, INT_MIN}};
        s21_decimal num_2 = {{1, 0, 0, 0}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 0);

        #test is_greater_or_equal_second_negative
        s21_decimal num_1 = {{1, 0, 0, 0}};
        s21_decimal num_2 = {{0, 0, 0, INT_MIN}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_both_negative
        s21_decimal num_1 = {{0, 0, 0, INT_MIN}};
        s21_decimal num_2 = {{0, 0, 0, INT_MIN}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_nums_max_decimal
        s21_decimal num_1 = {{INT_MAX, INT_MAX, INT_MAX, 0}};
        s21_decimal num_2 = {{INT_MAX, INT_MAX, INT_MAX, 0}};
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_nums_with_exp
        s21_decimal num_1 = {{INT_MAX, 0, 0, 0}};
        set_exp_decimal(&num_1, 0);
        s21_decimal num_2 = {{INT_MAX, 0, 0, 0}};
        set_exp_decimal(&num_2, 5);
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);

        #test is_greater_or_equal_nums_max_decimal_with_exp
        s21_decimal num_1 = {{INT_MAX, INT_MAX, INT_MAX, 0}};
        set_exp_decimal(&num_1, 1);
        s21_decimal num_2 = {{INT_MAX, INT_MAX, INT_MAX, 0}};
        set_exp_decimal(&num_2, 0);
        int res = s21_is_greater_or_equal(num_1, num_2);
        ck_assert_int_eq(res, 1);